{"version":3,"sources":["components/TableHeader.js","components/DataBody.js","components/DataTable.js","components/SearchBox/index.js","components/PageHeader/index.js","utils/API.js","components/DataArea.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","key","name","map","header","scope","onClick","props","orderChange","Component","DataBody","alt","fullName","src","thumbnail","address","phone","email","DataTable","query","className","results","sort","compareFnc","filter","data","first","last","toLowerCase","includes","employee","picture","location","street","number","SearchBox","noEnter","window","event","keyCode","onChange","e","handler","target","value","console","log","onKeyPress","this","type","placeholder","id","PageHeader","axios","get","DataArea","state","search","order","searchEmployee","API","then","res","setState","catch","err","handleOrderChange","a","b","handleInputChange","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.db0c8d13.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass TableHeader extends Component {\n    render() {\n        const headings = [\n            {\n                key: 1,\n                name: \"Thumbnail\"\n            },\n            {\n                key: 2,\n                name: \"Name\"\n            },\n            {\n                key: 3,\n                name: \"Address\"\n            },\n            {\n                key: 4,\n                name: \"Phone Number\"\n            },\n            {\n                key: 5,\n                name: \"E-mail\"\n            }];\n\n        return (\n            <thead>\n                <tr>\n                    {headings.map(header => (\n                        <th key={header.key} scope=\"col\" onClick={this.props.orderChange}>{header.name}</th>\n                    ))}\n                </tr>\n            </thead >\n        )\n    };\n};\n\nexport default TableHeader;\n","import React from \"react\";\n\nfunction DataBody(props) {\n\n    return (\n        <tr>\n            <th scope=\"row\"><img alt={`${props.fullName}`} src={props.thumbnail} /></th>\n            <td>{props.fullName}</td>\n            <td>{props.address}</td>\n            <td>{props.phone}</td>\n            <td>{props.email}</td>\n        </tr>\n    )\n};\n\nexport default DataBody;\n\n","import React from \"react\";\nimport TableHeader from \"./TableHeader\";\nimport DataBody from \"./DataBody\";\n\nfunction DataTable(props) {\n    let query = props.query;\n    return (\n        <div className=\"header\">\n            <table className=\"table\">\n                <TableHeader\n                    orderChange={props.orderChange}\n                />\n                <tbody>\n                    {props.results.sort(props.compareFnc)\n                        .filter(data => {\n                            const fullName = `${data.name.first} ${data.name.last}`\n                            if (!query) {\n                                return data\n                            } else if (fullName.toLowerCase().includes(query.toLowerCase())) {\n                                return data\n                            }\n                        })\n                        .map(employee => (\n                            <DataBody\n                                thumbnail={employee.picture.thumbnail}\n                                fullName={`${employee.name.first} ${employee.name.last}`}\n                                address={`${employee.location.street.number} ${employee.location.street.name}`}\n                                phone={employee.phone}\n                                email={employee.email}\n                            />\n                        ))}\n                </tbody>\n            </table>\n        </div>\n    )\n};\n\nexport default DataTable;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass SearchBox extends Component {\n\n    noEnter = () => {\n        return !(window.event && window.event.keyCode === 13);\n    };\n\n    render() {\n        return (\n            <form className=\"search\" >\n                <div className=\"form-group text-center\">\n                    <input\n                        onChange={(e) => {\n                            this.props.handler(e.target.value)\n                            console.log(e.target.value);\n                        }}\n                        onKeyPress={this.noEnter}\n                        type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Employee Name Search\"\n                        id=\"employee\"\n                    />\n                </div>\n            </form >\n        )\n    };\n};\n\nexport default SearchBox;","import React, { Component } from \"react\";\nimport \"./style.css\";\nimport SearchBox from \"../SearchBox\";\n\nclass PageHeader extends Component {\n\n    render() {\n        return (\n            <div className=\"jumbotron text-center\" >\n                <h1 className=\"display-4\">Employee Directory</h1>\n                <p className=\"lead\">Type in search bar below for an employee's name.</p>\n                <p className=\"lead\">Click the table header to toggle names in ascending/descending order.</p>\n                <hr className=\"my-4\" />\n                <SearchBox handler={this.props.handler} />\n            </div>\n        )\n    };\n};\n\nexport default PageHeader;","import axios from \"axios\";\n\nexport default {\n    search: () => axios.get(\"https://randomuser.me/api/?nat=us&results=50\")\n}\n","import React, { Component } from \"react\";\nimport DataTable from \"./DataTable\";\nimport PageHeader from \"./PageHeader\"\nimport API from \"../utils/API\";\n\nclass DataArea extends Component {\n    state = {\n        search: \"\",\n        results: [],\n        order: \"ascend\"\n    };\n\n    componentDidMount() {\n        this.searchEmployee();\n    };\n\n    searchEmployee = () => {\n        API.search()\n            .then(res => {\n                this.setState({ results: res.data.results })\n                console.log(this.state.results)\n            })\n            .catch(err => console.log(err));\n    };\n\n    handleOrderChange = () => this.state.order === \"ascend\" ? this.setState({ order: \"descend\" }) : this.setState({ order: \"ascend\" });\n\n    compareFnc = (a, b) => {\n\n        //Ascending\n        if (this.state.order === \"ascend\") {\n            if (a.name.first < b.name.first) {\n                return -1;\n            }\n            if (a.name.first > b.name.first) {\n                return 1;\n            }\n            return 0;\n        }\n        //Descending\n        else {\n            if (a.name.first < b.name.first) {\n                return 1;\n            }\n            if (a.name.first > b.name.first) {\n                return -1;\n            }\n            return 0;\n        }\n    };\n\n\n    handleInputChange = value => {\n        this.setState({ search: value })\n    };\n\n    render() {\n        return (\n            <div>\n                <PageHeader\n                    handler={this.handleInputChange} />\n                <DataTable\n                    query={this.state.search}\n                    results={this.state.results}\n                    compareFnc={this.compareFnc}\n                    orderChange={this.handleOrderChange} />\n            </div>\n        )\n    };\n};\n\nexport default DataArea;","import React from 'react';\nimport DataArea from \"./components/DataArea\"\n\nfunction App() {\n  return (\n    <DataArea />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}